
'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

import time

#--------------------------------------
# This is a wrong solution.
#--------------------------------------
o, e = 1, 2
sum = e
limit = 4_000_000
print(f'{"n":>5} {"f":>10} {"sum":>10}')
print('-------------------------------')
print(f'{2:>5} {e:>10} {sum:>10}')
n = 3
while e <= limit and o <= limit:
    o, e = e, o+e
    if not n%2:
        sum += e
        print(f'{n:>5,} {e:>10,} {sum:>10,}')
    n += 1

print('\nsum')
print(f'{sum:>10,}')

#--------------------------------------
# This is my righ solution.
#--------------------------------------
o, e = 1, 2
sum = e
limit = 4_000_000
print(f'{"n":>5} {"f":>10} {"sum":>10}')
print('-------------------------------')
print(f'{2:>5} {e:>10} {sum:>10}')
n = 3
t1 = time.time()
while e<=limit and o<=limit:
    o, e = e, o+e
    if not e % 2:
        sum += e
        print(f'{n:>5,} {e:>10,} {sum:>10,}')
    n += 1
t2 = time.time()

print('\nsum')
print(f'{sum:>10,}')

elapse = (t2 - t1)*10**6
print (f"{elapse=:.2f}us")

#--------------------------------------
# Another Solution
#--------------------------------------
print(f'{"n":>5} {"f":>10} {"sum":>10}')
print('-------------------------------')
n = 2
sum, a, b, c = 0, 1, 1, 2
t1 = time.time()
while c<limit:
    sum = sum+c
    print(f'{n:>5,} {c:>10,} {sum:>10,}')
    a = b+c
    b = c+a
    c = a+b
    n += 1
t2 = time.time()
print('\nsum')
print(f'{sum:>10,}')
elapse = (t2 - t1)*10**6
print (f"{elapse=:.2f}us")

